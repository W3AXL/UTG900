* UTG-900 - Tool to control UNIT-T UTG900 Waveform generator $Release:0.0.4-SNAPSHOT$

** Usage
:PROPERTIES:
:header-args:bash: :dir  UTG900
:END:

*** Command ~?~

Running 

#+name: help
#+BEGIN_SRC bash :eval no-export :results output :exports both
./UTG900.py ?
#+END_SRC

shows commad usage

#+RESULTS: help
#+begin_example
UTG900.py - Tool to control UNIT-T UTG900 Waveform generator

Usage: UTG900.py [options] [commands and properties] 

Commands:
         q  : Exit
         Q  : Exit
         ?  : Usage help
      sine  : Generate sine -wave on channel 1|2
    square  : Generate square -wave on channel 1|2
     pulse  : Generate pulse -wave on channel 1|2
        on  : Switch on channel 1|2
       off  : Switch off channel 1|2
     reset  : Send reset to UTG900 signal generator
    screen  : Take screenshot to 'captureDir'

More help:
UTG900.py --help                   : to list options
UTG900.py ? command=<command>      : to get help on command <command>

Examples:
UTG900.py ? command=sine           : help on sine command
UTG900.py --captureDir=pics screen : Take screenshot to pics directory
UTG900.py reset                    : Send reset to UTH900 waveform generator
UTG900.py sine ch=2 freq=2kHz      : 2 kHz sine signal on channel 1
UTG900.py sine ch=1 square ch=2    : chaining sine command on channel 1, and square command  on channel 2
#+end_example


To list options run 

#+BEGIN_SRC bash :eval no-export :results output
./UTG900.py --help
#+END_SRC

#+RESULTS:
#+begin_example

       USAGE: ./UTG900.py [flags]
flags:

./UTG900.py:
  --addr: UTG900 pyvisa resource address
    (default: 'USB0::0x6656::0x0834::1485061822::INSTR')
  --captureDir: Capture directory
    (default: 'tmp')
  --debug: -3=fatal, -1=warning, 0=info, 1=debug
    (default: '-1')
    (an integer)

Try --helpfull to get a list of all flags.
#+end_example


*** Command ~screen~ - take screenshot

Options of  ~screen~ -command

#+BEGIN_SRC bash :eval no-export :results output :exports both
./UTG900.py ? command=screen
#+END_SRC

#+RESULTS:
: screen - Take screenshot to 'captureDir'
: 
:   fileName  : Screen capture file name (optional)

For example, running command

#+BEGIN_SRC bash :eval no-export :results output :exports code
./UTG900.py --captureDir=pics screen fileName=example1.png
#+END_SRC

#+RESULTS:
: Successfully connected  'USB0::0x6656::0x0834::1485061822::INSTR' with 'UNI-T Technologies,UTG900,1485061822,1.08'

creates file ~example1.png~ in directory ~pics~. If ~fileName~
property is not given the command generates timestamped screenshot
file.

[[file:UTG900/pics/example1.png]]


*** Command ~reset~ - Send reset command to UTG900 

Options of  ~reset~ -command

#+BEGIN_SRC bash :eval no-export :results output :exports both
./UTG900.py ? command=reset
#+END_SRC

#+RESULTS:
: reset - Send reset to UTG900 signal generator
: 

Example usage:

#+BEGIN_SRC bash :eval no-export :results output :exports code
./UTG900.py reset
#+END_SRC

#+RESULTS:
: Successfully connected  'USB0::0x6656::0x0834::1485061822::INSTR' with 'UNI-T Technologies,UTG900,1485061822,1.08'


*** Command ~sine~ - Generate sive wave

Options of  ~sine~ -command

#+BEGIN_SRC bash :eval no-export :results output
./UTG900.py ? command=sine
#+END_SRC

#+RESULTS:
: sine - Generate sine -wave on channel 1|2
: 
:         ch  : Channel for wave generation
:       freq  : Frequency [uHz|mHz|kHz|MHz]
:        amp  : Amplitude [mVpp|Vpp|mVrms|Vrms]
:     offset  : Offset [mV|V]
:      phase  : Phase [deg]



For example, chaing of ~reset~, ~sine~, and ~screen~ commands. As the
result, the waveform generator generates 1 MHz sine signal on channel
1, with amplitude of 0.1V, offset of -0.5V, and phase of 42 degreees.
Finally, a screenshot is taken to file ~example-sine.png~.

#+BEGIN_SRC bash :eval no-export :results output :exports both
./UTG900.py reset sine ch=1 freq=1MHz amp=100mVpp offset=-0.5V phase=42deg screen fileName=example-sine.png
#+END_SRC

#+RESULTS:
: Successfully connected  'USB0::0x6656::0x0834::1485061822::INSTR' with 'UNI-T Technologies,UTG900,1485061822,1.08'

The screenshot taken in the example above: 

[[file:UTG900/pics/example-sine.png]]


*** Command ~square~ - Generate square wave

Options of  ~square~ -command

#+BEGIN_SRC bash :eval no-export :results output :exports both
./UTG900.py ? command=square
#+END_SRC

#+RESULTS:
: square - Generate square -wave on channel 1|2
: 
:         ch  : Channel 1,2 to switch on/off
:       freq  : Frequency [uHz|mHz|kHz|MHz]
:        amp  : Amplitude [mVpp|Vpp|mVrms|Vrms]
:     offset  : Offset [mV|V]
:      phase  : Phase [deg]
:       duty  : Duty [%]



*** Command ~pulse~ - Generate pulse wave

Options of  ~pulse~ -command

#+BEGIN_SRC bash :eval no-export :results output
./UTG900.py ? command=pulse
#+END_SRC

#+RESULTS:
#+begin_example
pulse - Generate pulse -wave on channel 1|2

        ch  : Channel 1,2 to switch on/off
      freq  : Frequency [uHz|mHz|kHz|MHz]
       amp  : Amplitude [mVpp|Vpp|mVrms|Vrms]
    offset  : Offset [mV|V]
     phase  : Phase [deg]
      duty  : Duty [%]
    raised  : Raise [ns,us,ms,s,ks]
      fall  : Fall [ns,us,ms,s,ks]
#+end_example



*** Command ~on~ and ~off~ - Switch channel on/off

Options of  ~on~ -command

#+BEGIN_SRC bash :eval no-export :results output :export both
./UTG900.py ? command=on
#+END_SRC

#+RESULTS:
: on - Switch on channel 1|2
: 
:         ch  : Channel 1,2 to switch on/off


Options of  ~off~ -command

#+BEGIN_SRC bash :eval no-export :results output :export both
./UTG900.py ? command=off
#+END_SRC

#+RESULTS:
: off - Switch off channel 1|2
: 
:         ch  : Channel 1,2 to switch on/off




** Requirements 

Runs on python3 using ~absl-py~ and ~pyvisa-py~ packages. Screenshot
used ~convert~ -command from ~imagemagick~ tool.


* Install

** Create =setup.py= package

#+BEGIN_SRC bash :eval no-export :results output
cat VERSION
#+END_SRC

#+RESULTS:
: 0.0.3


Ref: https://packaging.python.org/guides/distributing-packages-using-setuptools/

#+BEGIN_SRC bash :eval no-export :results output :exports code
python3 setup.py  sdist  bdist_wheel
#+END_SRC

#+RESULTS:
#+begin_example
version 0.0.3 , packages ['UTG900']
running sdist
running egg_info
writing utg900.egg-info/PKG-INFO
writing dependency_links to utg900.egg-info/dependency_links.txt
writing top-level names to utg900.egg-info/top_level.txt
reading manifest file 'utg900.egg-info/SOURCES.txt'
writing manifest file 'utg900.egg-info/SOURCES.txt'
running check
creating utg900-0.0.3
creating utg900-0.0.3/UTG900
creating utg900-0.0.3/utg900.egg-info
copying files to utg900-0.0.3...
copying setup.py -> utg900-0.0.3
copying UTG900/UTG900.py -> utg900-0.0.3/UTG900
copying UTG900/__init__.py -> utg900-0.0.3/UTG900
copying UTG900/../RELEASES.md -> utg900-0.0.3/UTG900/..
copying UTG900/../VERSION -> utg900-0.0.3/UTG900/..
copying utg900.egg-info/PKG-INFO -> utg900-0.0.3/utg900.egg-info
copying utg900.egg-info/SOURCES.txt -> utg900-0.0.3/utg900.egg-info
copying utg900.egg-info/dependency_links.txt -> utg900-0.0.3/utg900.egg-info
copying utg900.egg-info/top_level.txt -> utg900-0.0.3/utg900.egg-info
Writing utg900-0.0.3/setup.cfg
Creating tar archive
removing 'utg900-0.0.3' (and everything under it)
running bdist_wheel
running build
running build_py
installing to build/bdist.linux-x86_64/wheel
running install
running install_lib
creating build/bdist.linux-x86_64/wheel
creating build/bdist.linux-x86_64/wheel/UTG900
copying build/lib/UTG900/__init__.py -> build/bdist.linux-x86_64/wheel/UTG900
copying build/lib/UTG900/UTG900.py -> build/bdist.linux-x86_64/wheel/UTG900
copying build/lib/VERSION -> build/bdist.linux-x86_64/wheel
copying build/lib/RELEASES.md -> build/bdist.linux-x86_64/wheel
running install_egg_info
Copying utg900.egg-info to build/bdist.linux-x86_64/wheel/utg900-0.0.3-py3.9.egg-info
running install_scripts
creating build/bdist.linux-x86_64/wheel/utg900-0.0.3.dist-info/WHEEL
creating 'dist/utg900-0.0.3-py3-none-any.whl' and adding 'build/bdist.linux-x86_64/wheel' to it
adding 'RELEASES.md'
adding 'VERSION'
adding 'UTG900/UTG900.py'
adding 'UTG900/__init__.py'
adding 'utg900-0.0.3.dist-info/METADATA'
adding 'utg900-0.0.3.dist-info/WHEEL'
adding 'utg900-0.0.3.dist-info/top_level.txt'
adding 'utg900-0.0.3.dist-info/RECORD'
removing build/bdist.linux-x86_64/wheel
#+end_example


** Install distribution package

#+BEGIN_SRC bash :eval no-export :results output
VERSION_FILE=$(ls -1tr dist/*.tar.gz | tail -1| cut -f2)
echo VERSION_FILE=$VERSION_FILE
python3 -m pip install --user $VERSION_FILE  && echo installed $VERSION_FILE
#+END_SRC

#+RESULTS:
#+begin_example
VERSION_FILE=dist/utg900-0.0.3.tar.gz
Processing ./dist/utg900-0.0.3.tar.gz
Building wheels for collected packages: utg900
  Building wheel for utg900 (setup.py): started
  Building wheel for utg900 (setup.py): finished with status 'done'
  Created wheel for utg900: filename=utg900-0.0.3-py3-none-any.whl size=6927 sha256=2119925b02a9cfffb7ed4766217aeaf9e25dedc5b6037ba563c008796da2ec9f
  Stored in directory: /home/jj/.cache/pip/wheels/4f/a5/ac/26a6b05bd6322efe5983535804c48cef89b17941d95806a5e2
Successfully built utg900
Installing collected packages: utg900
  Attempting uninstall: utg900
    Found existing installation: utg900 0.0.2
    Uninstalling utg900-0.0.2:
      Successfully uninstalled utg900-0.0.2
Successfully installed utg900-0.0.3
installed dist/utg900-0.0.3.tar.gz
#+end_example


* Delivery                                                         :noexport:

*Development environment only!!*

** Relaseit

*** Show release status

 #+BEGIN_SRC sh :eval no-export :results output
 releaseit.sh show
 #+END_SRC

 #+RESULTS:
 : /home/jj/bin/releaseit.sh - $Release:0.0.4-SNAPSHOT$
 : ------------------------------------------------------------------
 : PREV_REL=0.0.2 --> REL=0.0.3-SNAPSHOT
 : ------------------------------------------------------------------
 : ## 0.0.3-SNAPSHOT/20210328-23:02:58
 : 
 : - README.org: installation
 : ------------------------------------------------------------------


*** Create release 

 Should not have any files unchecked

 #+BEGIN_SRC sh :eval no-export :results output
 git status
 #+END_SRC

 #+RESULTS:
 : On branch master
 : Your branch is ahead of 'origin/master' by 1 commit.
 :   (use "git push" to publish your local commits)
 : 
 : nothing to commit, working tree clean


 #+BEGIN_SRC sh :eval no-export :results output
 releaseit.sh  create_release commit current VERSION files README.org -  commit tag 2>&1 || true
 #+END_SRC

 #+RESULTS:
 : [master 1113226] ## 0.0.1/20210328-22:51:12
 :  1 file changed, 1 insertion(+), 1 deletion(-)
 : [master 7a712ea] ## 0.0.1/20210328-22:51:12
 :  1 file changed, 1 insertion(+), 1 deletion(-)


** Create snapshot

 #+BEGIN_SRC sh :eval no-export :results output
 releaseit.sh  create_snapshot current VERSION files README.org - commit || true
 #+END_SRC

 #+RESULTS:
 : [master 1f4c927] ## 0.0.2-SNAPSHOT/20210328-22:55:43
 :  3 files changed, 53 insertions(+), 67 deletions(-)


 
* Fin                                                              :noexport:

** Emacs variables

   #+RESULTS:

   # Local Variables:
   # org-confirm-babel-evaluate: nil
   # End:
   #
   # Muuta 
   # eval: (cdlatex-mode)
   #
   # Local ebib:
   # org-ref-default-bibliography: "./README.bib"
   # org-ref-bibliography-notes: "./README-notes.org"
   # org-ref-pdf-directory: "./pdf/"
   # org-ref-notes-directory: "."
   # bibtex-completion-notes-path: "./README-notes.org"
   # ebib-preload-bib-files: ("./README.bib")
   # ebib-notes-file: ("./README-notes.org")
   # reftex-default-bibliography: ("./README.bib")



