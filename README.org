* UTG-900 - Tool to control UNIT-T UTG900 Waveform generator $Release:0.0.5-SNAPSHOT$
:PROPERTIES:
:TOC:      :include all
:END:

:CONTENTS:
- [[#utg-900---tool-to-control-unit-t-utg900-waveform-generator-release005-snapshot][UTG-900 - Tool to control UNIT-T UTG900 Waveform generator $Release:0.0.5-SNAPSHOT$]]
  - [[#usage][Usage]]
    - [[#interactive-usage][Interactive usage]]
    - [[#command-line-parameter-usage][Command line parameter usage]]
    - [[#api-usage][API usage]]
  - [[#commands-and-parameters][Commands and parameters]]
    - [[#command-][Command ?]]
    - [[#command-screen---take-screenshot][Command screen - take screenshot]]
    - [[#command-reset---send-reset-command-to-utg900][Command reset - Send reset command to UTG900]]
    - [[#command-sine---generate-sive-wave][Command sine - Generate sive wave]]
    - [[#command-square---generate-square-wave][Command square - Generate square wave]]
    - [[#command-pulse---generate-pulse-wave][Command pulse - Generate pulse wave]]
    - [[#command-arb---upload-wave-file-and-use-it-to-generate-wave][Command arb - Upload wave file and use it to generate wave]]
    - [[#command-on-and-off---switch-channel-onoff][Command on and off - Switch channel on/off]]
    - [[#command-list_resources---list-pyvisa-resourses][Command list_resources - List pyvisa resourses]]
    - [[#command-version---output-version-number][Command version - Output version number]]
  - [[#requirements][Requirements]]
- [[#installation][Installation]]
  - [[#clone-repo-httpsgithubcomjarjukutg900][Clone repo https://github.com/jarjuk/UTG900]]
  - [[#show-version][Show version]]
  - [[#show-releases-notes][Show releases notes]]
  - [[#check-installation][Check installation]]
  - [[#check-list-resources][Check list resources]]
  - [[#use-it][Use it]]
:END:


** Usage
:PROPERTIES:
:header-args:bash: :dir  UTG900
:END:

*** Interactive usage

Command

#+BEGIN_SRC bash :eval no :results output :exports both
./UTG900.py
#+END_SRC

starts UTG-900 - Tool in interactive mode, and prompts user with

#+begin_example
Command [q=quit,?=help] >
#+end_example

- Help, and list of commands is presented with ~?~.
- Giving ~q~ exits the program
- Giving command name invokes sequence asking for command parameters


*** Command line parameter usage

#+BEGIN_SRC bash :eval no-export :results output :exports results
./UTG900.py ? |  grep 'Usage:'
#+END_SRC

#+RESULTS:
: Usage: UTG900.py [options] [commands and parameters] 

See section =commands and parameters= below for details

*** API usage

*TBD*

** Commands and parameters

*** Command ~?~

Running 

#+name: help
#+BEGIN_SRC bash :eval no-export :results output :exports both
./UTG900.py ?
#+END_SRC

shows commad usage

#+RESULTS: help
#+begin_example
UTG900.py - 0.0.5-SNAPSHOT: Tool to control UNIT-T UTG900 Waveform generator

Usage: UTG900.py [options] [commands and parameters] 

Commands:
              q  : Exit
              Q  : Exit
              ?  : Usage help
           sine  : Generate sine -wave on channel 1|2
         square  : Generate square -wave on channel 1|2
          pulse  : Generate pulse -wave on channel 1|2
            arb  : Upload wave file and use it to generate wave on channel 1|2
             on  : Switch on channel 1|2
            off  : Switch off channel 1|2
          reset  : Send reset to UTG900 signal generator
         screen  : Take screenshot to 'captureDir'
 list_resources  : List pyvisa resources (=pyvisa list_resources() wrapper)'
        version  : Output version number

More help:
  UTG900.py --help                          : to list options
  UTG900.py ? command=<command>             : to get help on command <command> parameters

Examples:
  UTG900.py ? command=sine                  : help on sine command parameters
  UTG900.py list_resources                  : Identify --addr option parameter
  UTG900.py --addr 'USB0::1::2::3::0::INSTR': Run interactively on device found in --addr 'USB0::1::2::3::0::INSTR'
  UTG900.py --captureDir=pics screen        : Take screenshot to pics directory (form device in default --addr)
  UTG900.py reset                           : Send reset to UTH900 waveform generator
  UTG900.py sine ch=2 freq=2kHz             : Generate 2 kHz sine signal on channel 2
  UTG900.py sine ch=1 square ch=2           : chaining sine generation on channel 1, and square generation on channel 2

Hint:
  One-liner in linux: UTG900.py --addr $(UTG900.py list_resources)
#+end_example


To list options run 

#+BEGIN_SRC bash :eval no-export :results output :exports both
./UTG900.py --help
#+END_SRC

#+RESULTS:
#+begin_example

       USAGE: ./UTG900.py [flags]
flags:

./UTG900.py:
  --addr: UTG900 pyvisa resource address
    (default: 'USB0::0x6656::0x0834::1485061822::INSTR')
  --captureDir: Capture directory
    (default: 'tmp')
  --debug: -3=fatal, -1=warning, 0=info, 1=debug
    (default: '-1')
    (an integer)

Try --helpfull to get a list of all flags.
#+end_example


*** Command ~screen~ - take screenshot

Options of  ~screen~ -command

#+BEGIN_SRC bash :eval no-export :results output :exports both
./UTG900.py ? command=screen
#+END_SRC

#+RESULTS:
: screen - Take screenshot to 'captureDir'
: 
:   fileName  : Screen capture file name (optional)
: 
: Notice:
: - parameters MUST BE given in the order listed above
: - parameters are optional and they MAY BE left out

For example, running command

#+BEGIN_SRC bash :eval no-export :results output :exports code
./UTG900.py --captureDir=pics screen fileName=example1.png
#+END_SRC

#+RESULTS:
: Successfully connected  'USB0::0x6656::0x0834::1485061822::INSTR' with 'UNI-T Technologies,UTG900,1485061822,1.08'

creates file ~example1.png~ in directory ~pics~. If ~fileName~
property is not given the command generates timestamped screenshot
file.

[[file:UTG900/pics/example1.png]]


*** Command ~reset~ - Send reset command to UTG900 

Options of  ~reset~ -command

#+BEGIN_SRC bash :eval no-export :results output :exports both
./UTG900.py ? command=reset
#+END_SRC

#+RESULTS:
: reset - Send reset to UTG900 signal generator
: 
: *No parameters*
: 
: Notice:
: - parameters MUST BE given in the order listed above
: - parameters are optional and they MAY BE left out

Example usage:

#+BEGIN_SRC bash :eval no-export :results output :exports code
./UTG900.py reset
#+END_SRC

#+RESULTS:
: Successfully connected  'USB0::0x6656::0x0834::1485061822::INSTR' with 'UNI-T Technologies,UTG900,1485061822,1.08'


*** Command ~sine~ - Generate sive wave

Options of  ~sine~ -command

#+BEGIN_SRC bash :eval no-export :results output :exports both
./UTG900.py ? command=sine
#+END_SRC

#+RESULTS:
#+begin_example
sine - Generate sine -wave on channel 1|2

        ch  : Channel 1,2 to switch on/off
      freq  : Frequency [uHz|mHz|kHz|MHz]
       amp  : Amplitude [mVpp|Vpp|mVrms|Vrms]
    offset  : Offset [mV|V]
     phase  : Phase [deg]

Notice:
- parameters MUST BE given in the order listed above
- parameters are optional and they MAY BE left out
#+end_example



For example, chaining of ~reset~, ~sine~, and ~screen~ commands. As the
result, the waveform generator generates 1 MHz sine signal on channel
1, with amplitude of 0.1V, offset of -0.5V, and phase of 42 degreees.
Finally, a screenshot is taken to file ~example-sine.png~.

#+BEGIN_SRC bash :eval no-export :results output :exports both
./UTG900.py reset sine ch=1 freq=1MHz amp=100mVpp offset=-0.5V phase=42deg screen fileName=example-sine.png
#+END_SRC

#+RESULTS:
: Successfully connected  'USB0::0x6656::0x0834::1485061822::INSTR' with 'UNI-T Technologies,UTG900,1485061822,1.08'

The screenshot taken in the example above: 

[[file:UTG900/pics/example-sine.png]]


*** Command ~square~ - Generate square wave

Options of  ~square~ -command

#+BEGIN_SRC bash :eval no-export :results output :exports both
./UTG900.py ? command=square
#+END_SRC

#+RESULTS:
#+begin_example
square - Generate square -wave on channel 1|2

        ch  : Channel 1,2 to switch on/off
      freq  : Frequency [uHz|mHz|kHz|MHz]
       amp  : Amplitude [mVpp|Vpp|mVrms|Vrms]
    offset  : Offset [mV|V]
     phase  : Phase [deg]
      duty  : Duty [%]

Notice:
- parameters MUST BE given in the order listed above
- parameters are optional and they MAY BE left out
#+end_example



*** Command ~pulse~ - Generate pulse wave

Options of  ~pulse~ -command

#+BEGIN_SRC bash :eval no-export :results output :exports both
./UTG900.py ? command=pulse
#+END_SRC

#+RESULTS:
#+begin_example
pulse - Generate pulse -wave on channel 1|2

        ch  : Channel 1,2 to switch on/off
      freq  : Frequency [uHz|mHz|kHz|MHz]
       amp  : Amplitude [mVpp|Vpp|mVrms|Vrms]
    offset  : Offset [mV|V]
     phase  : Phase [deg]
      duty  : Duty [%]
    raised  : Raise [ns,us,ms,s,ks]
      fall  : Fall [ns,us,ms,s,ks]

Notice:
- parameters MUST BE given in the order listed above
- parameters are optional and they MAY BE left out
#+end_example



*** Command ~arb~ - Upload wave file and use it to generate wave

Options of  ~arb~ -command

#+BEGIN_SRC bash :eval no-export :results output :exports both
./UTG900.py ? command=arb
#+END_SRC

#+RESULTS:
#+begin_example
arb - Upload wave file and use it to generate wave on channel 1|2

        ch  : Channel 1,2 to switch on/off
      freq  : Frequency [uHz|mHz|kHz|MHz]
       amp  : Amplitude [mVpp|Vpp|mVrms|Vrms]
    offset  : Offset [mV|V]
     phase  : Phase [deg]
  filePath  : Path to waveform file

Notice:
- parameters MUST BE given in the order listed above
- parameters are optional and they MAY BE left out
#+end_example

*TDB* documenation missing

#+BEGIN_SRC bash :eval no-export :results output :export results
cat ../data/example1.csv
#+END_SRC

#+RESULTS:
: /home/jj/work/UTG900/UTG900
: 1,0.2
: 2,0.1
: 3,0.4

*TBD* this does not work

#+BEGIN_SRC bash :eval no-export :results output
./UTG900.py --debug 1  arb ch=1 filePath='../data/example1.csv'
#+END_SRC

#+RESULTS:



*** Command ~on~ and ~off~ - Switch channel on/off

Options of  ~on~ -command

#+BEGIN_SRC bash :eval no-export :results output :exports both
./UTG900.py ? command=on
#+END_SRC

#+RESULTS:
: on - Switch on channel 1|2
: 
:         ch  : Channel 1,2 to switch on/off
: 
: Notice:
: - parameters MUST BE given in the order listed above
: - parameters are optional and they MAY BE left out


Options of  ~off~ -command

#+BEGIN_SRC bash :eval no-export :results output :exports both
./UTG900.py ? command=off
#+END_SRC

#+RESULTS:
: off - Switch off channel 1|2
: 
:         ch  : Channel 1,2 to switch on/off
: 
: Notice:
: - parameters MUST BE given in the order listed above
: - parameters are optional and they MAY BE left out



*** Command ~list_resources~ - List pyvisa resourses

Command usage

#+BEGIN_SRC bash :eval no-export :results output :exports both
./UTG900.py ? command=list_resources
#+END_SRC

#+RESULTS:
: list_resources - List pyvisa resources (=pyvisa list_resources() wrapper)'
: 
: *No parameters*
: 
: Notice:
: - parameters MUST BE given in the order listed above
: - parameters are optional and they MAY BE left out

Command ~list_resources~ 

#+name: list_resources
#+BEGIN_SRC bash :eval no-export :results output :exports both
./UTG900.py list_resources
#+END_SRC

returns a list of devices, which pyvisa find. For example:

#+RESULTS: list_resources
: ('USB0::26198::2100::1485061822::0::INSTR',)


An empty list is returned, when no device is found.

#+BEGIN_SRC bash :eval no :results output :exports results
./UTG900.py list_resources
#+END_SRC

#+RESULTS:
: ()



*** Command ~version~ - Output version number

~version~ - command does not not take any parameters. It ouputs
version number of the tool

#+BEGIN_SRC bash :eval no-export :results output :exports both
./UTG900.py version
#+END_SRC

#+RESULTS:
: 0.0.4-SNAPSHOT


** Requirements 

Runs on python3 using ~absl-py~ and ~pyvisa-py~ packages. Screenshot
used ~convert~ -command from ~imagemagick~ tool.


* Installation
:PROPERTIES:
:header-args:bash: :dir  tmp
:END:


** Clone repo ~https://github.com/jarjuk/UTG900~


#+BEGIN_SRC bash :eval no-export :results output
git clone https://github.com/jarjuk/UTG900
#+END_SRC

#+RESULTS:

** Show version

#+BEGIN_SRC bash :eval no-export :results output
cat UTG900/VERSION
#+END_SRC

#+RESULTS:
: 0.0.4-SNAPSHOT

** Show releases notes

#+BEGIN_SRC bash :eval no :results output
cat UTG900/RELEASES.md
#+END_SRC

** Check installation

Run 

#+BEGIN_SRC bash :eval no-export :results output
UTG900/UTG900/UTG900.py version
#+END_SRC

#+RESULTS:
: 0.0.4-SNAPSHOT

** Check list resources 

Run

#+BEGIN_SRC bash :eval no-export :results output
UTG900/UTG900/UTG900.py list_resources
#+END_SRC

#+RESULTS:
: USB0::26198::2100::1485061822::0::INSTR


** Use it

To connect to your device, and to run interactively

#+BEGIN_SRC bash :eval no-export :results output
UTG900/UTG900/UTG900.py --addr $(UTG900/UTG900/UTG900.py list_resources)
#+END_SRC


 
* Fin                                                              :noexport:

** Emacs variables                                                 :noexport:

   #+RESULTS:

   # Local Variables:
   # org-confirm-babel-evaluate: nil
   # End:
   #
   # Muuta 
   # eval: (cdlatex-mode)
   #
   # Local ebib:
   # org-ref-default-bibliography: "./README.bib"
   # org-ref-bibliography-notes: "./README-notes.org"
   # org-ref-pdf-directory: "./pdf/"
   # org-ref-notes-directory: "."
   # bibtex-completion-notes-path: "./README-notes.org"
   # ebib-preload-bib-files: ("./README.bib")
   # ebib-notes-file: ("./README-notes.org")
   # reftex-default-bibliography: ("./README.bib")



